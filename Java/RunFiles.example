import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Properties;
import java.util.Scanner;

import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.Document;
import org.w3c.dom.Node;

// - What is a Java File, and how can it be used?

class RunFiles {
    public static void readFile(String fileName) {
        System.out.println("Called readFile: " + fileName);
        System.out.println();
        
        try {
          
            File localFile = new File(fileName);
            Scanner scanner = new Scanner(localFile);

            while (scanner.hasNextLine()) {
                String data = scanner.nextLine();
                System.out.println(data);
            }

            scanner.close();

        } catch (FileNotFoundException e) {
            System.out.println("An error occurred.");
            e.printStackTrace();
        }
        System.out.println();

    }
    public static void writeJSONFile() {
        System.out.println("Called writeJSONFile");

        try {

            String jsonData = "{\"outer\":{\"value\":5}}";
            Files.write(Paths.get("files/localFile.json"), jsonData.getBytes());

        } catch (IOException e) {
            e.printStackTrace();
        }
        System.out.println();

    }
    public static void writeXMLFile() {
        System.out.println("Called writeXMLFile");
        
		try {

            final String NS = "namespace";
			final Document doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
			final Node policyClause = doc
                .appendChild(doc.createElementNS(NS, "outer"));
			policyClause
                .appendChild(doc.createElementNS(NS, "value"))
                .setTextContent("5");

			final ByteArrayOutputStream bos = new ByteArrayOutputStream();
            Transformer tf = TransformerFactory.newInstance().newTransformer();
            tf.setOutputProperty(OutputKeys.INDENT, "yes");
            tf.setOutputProperty(OutputKeys.METHOD, "xml");
            tf.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "4");
			tf.transform(new DOMSource(doc), new StreamResult(bos));

            Files.write(Paths.get("files/localFile.xml"), bos.toByteArray());

        } catch (Exception e) {
            e.printStackTrace();
		}
        System.out.println();

    }
    public static void writePropertiesFile(String key, String value) {
        System.out.println("Called writePropertiesFile");

        String path = "files/localFile.properties";
        try (OutputStream output = new FileOutputStream(path)) {

            Properties prop = new Properties();
            prop.setProperty(key, value);
            prop.store(output, null);

        } catch (IOException e) {
            e.printStackTrace();
        }
        System.out.println();

    }
    public static void deleteFile(String fileName) {
        System.out.println("Called deleteFile: " + fileName);
        System.out.println();
        
        try {
          
            File localFile = new File(fileName);
            localFile.delete();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    public static void deleteFilesDirectory() {
        System.out.println("Called deleteFilesDirectory");
        System.out.println();

        try {
            deleteFile("files/localFile.txt");
            deleteFile("files/localFile.json");
            deleteFile("files/localFile.xml");
            deleteFile("files/localFile.properties");
            Files.delete(Paths.get("files"));

        } catch (Exception e) {
            e.printStackTrace();
        }
        System.out.println();

    }
}

public class Main {
    public static void main(String[] args) {
        System.out.println();
        System.out.println("Hello Live Lessons");
        System.out.println();
        
        File files = new File("files");
        boolean madeDirectory = files.mkdir();
        System.out.println("Made Directory: " + madeDirectory);
        System.out.println();

        System.out.println("==========================================");
        System.out.println();

        RunFiles.readFile("files/localFile.txt");
        
        System.out.println("==========================================");
        System.out.println();
        
        RunFiles.writeJSONFile();
        RunFiles.readFile("files/localFile.json");

        System.out.println("==========================================");
        System.out.println();

        RunFiles.writeXMLFile();
        RunFiles.readFile("files/localFile.xml");

        System.out.println("==========================================");
        System.out.println();

        RunFiles.writePropertiesFile("value", "asdf");
        RunFiles.readFile("files/localFile.properties");
        
        RunFiles.writePropertiesFile("value", "jkl;");
        RunFiles.readFile("files/localFile.properties");

        System.out.println("==========================================");
        System.out.println();


        boolean removedDirectory = files.delete();
        System.out.println("Removed Directory: " + removedDirectory);
        System.out.println();

        RunFiles.deleteFilesDirectory();

        removedDirectory = !files.exists();
        System.out.println("Removed Directory: " + removedDirectory);
        System.out.println();

    }
}

// -- Read A TXT File

// -- Write a JSON File

// -- Write an XML File

// -- Write a Property File

// -- Read a Property File

// -- Delete Files Directory


// QUESTIONS: Q & A

// NEXT LESSON: Threads (2 Upvotes) vs Inheritance (2 Upvotes)?

// LESSON SUGGESTIONS: https://git.io/JqCKt
